#!/usr/bin/env python3


import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0} # Guardamos el máximo de ventas que se ha encontrado en el for de abajo
  datos_coche_mas_ventas = {} # Guardamos el item con más ventas
  year_more_sales = {} # Guardamos el año como clave y vamos aumentando recuento en valor para misma clave
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales["total_sales"] = item["total_sales"]
      datos_coche_mas_ventas = item["car"]

    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in year_more_sales.keys():
      year_more_sales[item["car"]["car_year"]] = item["total_sales"]
    else:
      year_more_sales[item["car"]["car_year"]] = year_more_sales[item["car"]["car_year"]] + item["total_sales"]

    

  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
  ]
  summary.append("The {} had the most sales: {}".format(format_car(datos_coche_mas_ventas), max_sales["total_sales"]))

  #Para dar el año y las ventas totales:
  tupla_max_key_value = max(zip(year_more_sales.values(), year_more_sales.keys()))
  summary.append("The most popular year was {} with {} sales.".format(tupla_max_key_value[1], tupla_max_key_value[0]))

  return summary    
def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

# TODO Ejercicio opcional. Ordenar por total_sales y añadir gráfico circular (pie chart)
def optional_exercise(summary_f, data_f):
  """Creamos un PDF a parte para el ejercicio opcional en la misma ruta que el bueno:

  1. Ordena de menor a mayor (sort) la lista de coches por ventas totales
  2. Crea un gráfico de tarta con las ventas totales de cada coche
  
  Nota: Este no se enviará por email"""

  # Creamos diccionario donde key será total_sale value una lista de índices
  diccionario = {}
  # Creamos una lista donde guardaremos data_f ya ordenado por total_sales
  data_f_sorted = [] 

  # Comenzamos con el diccionario
  for list_index in range(0, len(data_f)):
    valor_total_sales = data_f[list_index]["total_sales"] # Aquí iremos guardando cada valor de total_sales por diccionario en lista data_f
    if valor_total_sales not in diccionario.keys():
      diccionario[valor_total_sales] = [list_index]
    else:
      diccionario[valor_total_sales].append(list_index)

  # Ordenamos las claves del diccionario (por total_value) de menor a mayor
  diccionario_sorted = dict(sorted(diccionario.items())) # Diccionario con claves (keys) ordenadas

  # A partir de los índices (valores) recreamos la primera lista de diccionarios data_f ordenada
  for element in diccionario_sorted.values():
    for subelement in element:
      data_f_sorted.append(data_f[subelement])

  # Creamos el PDF
  reports.generate(filename="/tmp/cars_sorted_by_total_sales.pdf", title="Sales summary for last month", additional_info="{}<br/>{}<br/>{}".format(summary_f[0], summary_f[1], summary_f[2]), table_data=cars_dict_to_table(data_f_sorted), add_pie_chart=True)


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  reports.generate(filename="/tmp/cars.pdf", title="Sales summary for last month", additional_info="{}<br/>{}<br/>{}".format(summary[0], summary[1], summary[2]), table_data=cars_dict_to_table(data))
  # Ejercicio opcional, descomentar si quieres el PDF ordenado
  optional_exercise(summary, data)
  # TODO: send the PDF report as an email attachment
  mensaje = emails.generate(
    sender="automation@example.com",
    recipient="student@example.com",
    subject="Sales summary for last month",
    body="The same summary from the PDF, but using \n between the lines",
    attachment_path="/tmp/cars.pdf"
  )
  emails.send(mensaje)
if __name__ == "__main__":
  main(sys.argv)